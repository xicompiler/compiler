program ::= use* definitions

interface ::= signature+

use ::= USE ID SEMICOLON?

definitions ::= (method | (globdecl SEMICOLON?))* method

method ::= signature block

signature ::= ID LPAREN separated_list(decl, COMMA) RPAREN (COLON separated_nonempty_list(type, COMMA))?

decl ::= ID COLON TYPE

type ::= TYPE | type LBRACKET RBRACKET

block ::= LBRACE list(stmt) return? RBRACE

return ::= RETURN expr? SEMICOLON?

stmt ::= if | while | single_stmt SEMICOLON? | block

if ::= IF expr stmt (ELSE stmt)?

while ::= WHILE expr stmt

single_stmt ::= decl | assign | multi_init | app

assign ::= ID GETS expr

multi_init ::= separated_list(decl | WILDCARD, COMMA) GETS app

app ::= ID LPAREN separated_list(expr, COMMA) RPAREN

expr ::= expr binop bop_expr | bop_expr

bop_expr ::= unop uop_expr | uop_expr

unop_expr ::= 
  | unop_expr LBRACKET expr BRACKET
  | app
  | LPAREN expr RPAREN
  | INT
  | BOOL
  | LBRACE RBRACE
  | LBRACE separated_nonempty_list(expr, COMMA) COMMA? RBRACE

binop ::=
  | OR | AND
  | EQ | NEQ
  | LT | LEQ | GEQ | GT
  | PLUS | MINUS
  | MULT | HIGHMULT | DIV | MOD

unop ::= MINUS | NOT
